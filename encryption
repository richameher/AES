#include <stdio.h>
#include <stdint.h>
#include<system.h>
//#include<sys/alt_irq.h>


#define Nb 4
#define Nk 10
#define Nr 10

// Rijndael S-Box from web credit Wikipedia
const uint8_t sbox[256] =
{
	   0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	   0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	   0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	   0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	   0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	   0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

//Rcon box credit wikipedia
const uint8_t Rcon[40] = {
0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// SubBytes routine takes the byte in the state and feeds it through the s-box
void subBytes(uint8_t state[4][Nb]){ //takes state a 4 by Nb matrix
	int r,c; // declare r and c
	for(r = 0; r < 4; r++){ // loop through rows
		for(c = 0; c <Nb; c++){ // loop through cols
			state[r][c] = sbox[state[r][c]]; // feeds through s-box
		}
	}
}


// ShiftRows routine takes the state and shifts the rows by the row index
void shiftRows(uint8_t state[4][Nb]){ // take s4 by Nb state matrix
	uint8_t temp[4][Nb]; // declate temp
	int r,c; // declare indexes
	for(r=0;r<4;r++) for(c=0;c<Nb;c++) temp[r][c] = state[r][c]; // copy state to temp
	for(r = 0; r < 4; r++){ // loop through rows
		for(c = 0; c < Nb; c++){ // loop through cols
			state[r][c] = temp[r][(c+r)%Nb]; // set new state to same row but col shifted by col index
		}
	}
}

// AddRoundKey routine
void addRoundKey(uint8_t state[4][Nb], uint32_t w[44], int i){
	uint32_t rw[4];
	uint8_t rk[4][Nb]; // turns words to bytes
	int r,c;
	for(r=0;r<Nb;r++) rw[r] = w[i+r];
	for(c=0;c<Nb;c++){ // makes 4 by Nb array for easy;
		rk[0][c] = (uint8_t)(rw[c]&0xFF);
		rk[1][c] = (rw[c]&0xFF00)>>8;
		rk[2][c] = (rw[c]&0xFF0000)>>16;
		rk[3][c] = (rw[c]&0xFF000000)>>24;
	}
	for(r=0;r<4;r++) for(c=0;c<Nb;c++) state[r][c] ^= rk[r][c];
}

uint8_t mult2(uint8_t a){
	uint8_t b = a << 1;
	if(a&0b10000000) b ^= 0b1;
	return b;
}

uint8_t mult3(uint8_t a){
	uint8_t b = a << 1;
	if(a&0b10000000) b ^= 0b1;
	b ^= a;
	return b;
}

void mixColumns(uint8_t state[4][Nb]) {
	int r,c;
	uint8_t temp[4][Nb];
	for(r=0;r<4;r++) for(c=0;c<Nb;c++) temp[r][c] = state[r][c];
	for(c=0;c<Nb;c++){
		state[0][c] = mult2(temp[0][c])	^ mult3(temp[1][c])	^ temp[2][c]		^ temp[3][c];
		state[1][c] = temp[0][c]		^ mult2(temp[1][c])	^ mult3(temp[2][c])	^ temp[3][c];
		state[2][c] = temp[0][c]		^ temp[1][c]		^ mult2(temp[2][c])	^ mult3(temp[3][c]);
		state[3][c] = mult3(temp[0][c])	^ temp[1][c]		^ temp[2][c]		^ mult2(temp[3][c]);
	}
}

//helper function for keyExpansion
uint32_t rotWord(uint32_t to_rot)
{
//declare word to hold rotated word, hold most significant byte at the end
uint32_t rotated = to_rot>>24;
//add the rest of the bytes, make them each more significant
rotated = rotated | (to_rot<<8);
//return the rotated word
return rotated;
}

//helper function for keyExpansion
uint32_t subWord(uint32_t to_sub)
{
uint32_t mask = 255;
uint32_t temp = to_sub & mask;
uint32_t subbed = temp;
temp = (to_sub>>8) & mask;
subbed = subbed | (temp<<8);
temp = (to_sub>>16) & mask;
subbed = subbed | (temp<<16);
temp = (to_sub>>24) & mask;
subbed = subbed | (temp<<24);
return subbed;
}

void keyExpansion(uint8_t key[4*Nk], uint32_t w[Nb*(Nr+1)]){
	uint32_t temp;
	int i = 0;
	for(i=0;i<Nk;i++){
		w[i] = (key[4*i]<<24);
		w[i] = w[i] | (key[4*i+1]<<16);
		w[i] = w[i] | (key[4*i+2]<<8);
		w[i] = w[i] | (key[4*i+3]);
	}
	i++;
	while(i < (Nb*(Nr+1)))
	{
		temp = w[i-1];
		if(i%Nk == 0)
			temp = subWord(rotWord(temp)) ^ Rcon[i/Nk];
		w[i] = w[i-Nk] ^ temp;
		i++;
	}
}

int main() {
//define 4xNb array of bytes named state
uint8_t state[4][Nb];

printf("hello");

uint32_t w[44];
int i,j;
//initialize the values of state
for(i = 0; i < 4; i++){
	for(j = 0; j < Nb; j++){
		scanf("%x", state[i][j]);
}
}
//initialize the key
uint8_t key[4*Nk];
for(i = 0; i < 4*Nk; i++){
	scanf("%x", &(key[i]));
}
//create round keys
keyExpansion(key, w);

//perform the first AddRoundKey step
addRoundKey(state,w,0);

//for the first nine times
for(i = 0; i < 9; i++)
{
	//perform subBytes, shiftRows, mixColumns, and addRoundKey
	subBytes(state);
	shiftRows(state);
	mixColumns(state);
	addRoundKey(state,w,4*(i+1));
}
//perform last subBytes, shiftRows, and addRoundKey
subBytes(state);
shiftRows(state);
addRoundKey(state,w,40);

//output the result
for(i = 0; i < 4; i++)
{
	for(j = 0; j < Nb; j++)
	{

		printf("%x ", state[i][j]);
	printf("\n");

}
}


return 1;
}


